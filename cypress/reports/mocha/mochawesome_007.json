{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-08-28T15:33:51.276Z",
    "end": "2025-08-28T15:33:58.385Z",
    "duration": 7109,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f8941e39-e103-4260-ba9c-090d4d63296a",
      "title": "",
      "fullFile": "cypress\\e2e\\tc17083MockOrangeHRM.spec.cy.js",
      "file": "cypress\\e2e\\tc17083MockOrangeHRM.spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aead1e21-7675-4e20-bd5a-45dc393adcaa",
          "title": "Mock OrangeHRM Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "locations Mock",
              "fullTitle": "Mock OrangeHRM Testing locations Mock",
              "timedOut": null,
              "duration": 5001,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const url = \"api/v2/dashboard/employees/locations\";\nconst url = \"https://opensource-demo.orangehrmlive.com/web/index.php/api/v2/dashboard/employees/locations\";\ncy.log(url);\n// Intercept instead a request, for a _Mock_ values\ncy.intercept({\n  method: \"GET\",\n  url: url\n}, {\n  fixture: \"mock-locations.json\"\n});\ncy.wait(2500);\ncy.contains(\"Employee Distribution by Location\").should(\"be.visible\");\n// El siguiente proceso lo debo hacer porque existen muchos elementos con la misma clase \ncy.get(\".orangehrm-dashboard-widget-body\").then($elements => {\n  // $elements is a jQuery object containing all elements with the class 'my-class'\n  // You can treat it like an array and iterate over it or access elements by index.\n  // Example: Log the text of each element\n  $elements.each((index, element) => {\n    cy.log(`Element ${index + 1}: ${Cypress.$(element).text()}`);\n  });\n  // Example: Assert the number of elements\n  expect($elements).to.have.length(6);\n  // Necesito el quinto elemento que es el de `locations`\n  cy.wrap($elements.eq(5)).should(\"contain\", \"Texas R&D\").and(\"contain\", \"New York Sales Office\").and(\"contain\", \"Medellin\");\n});",
              "err": {},
              "uuid": "c3de39c6-2bf0-4710-80b6-a2efc1e3e71d",
              "parentUUID": "aead1e21-7675-4e20-bd5a-45dc393adcaa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3de39c6-2bf0-4710-80b6-a2efc1e3e71d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5001,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "./cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}